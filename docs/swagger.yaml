basePath: /
definitions:
  billing.CreateRequest:
    properties:
      amount:
        type: number
      comments:
        type: string
      company:
        type: string
      due_at:
        type: string
      issued_at:
        type: string
      status:
        type: string
    required:
    - amount
    - comments
    - company
    - due_at
    - issued_at
    - status
    type: object
  campaign.CreateRequest:
    properties:
      company:
        type: string
      resource_name:
        type: string
    required:
    - company
    - resource_name
    type: object
  company.CreateRequest:
    properties:
      domain:
        type: string
      email:
        type: string
      industry:
        type: string
      name:
        type: string
    required:
    - domain
    - email
    - industry
    - name
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
    required:
    - error
    type: object
  dto.MessageResponse:
    properties:
      message:
        type: string
    required:
    - message
    type: object
  gads.AdGroup:
    properties:
      id:
        type: integer
      name:
        type: string
      resource_name:
        type: string
    type: object
  gads.AdGroupAd:
    properties:
      final_url:
        items:
          type: string
        type: array
      id:
        type: integer
      name:
        type: string
      resource_name:
        type: string
    type: object
  gads.Keyword:
    properties:
      id:
        type: integer
      keyword:
        type: string
    type: object
  helpers.Campaign:
    properties:
      id:
        type: integer
      name:
        type: string
      resource_name:
        type: string
    type: object
  helpers.Client:
    properties:
      current_code:
        type: string
      descriptive_name:
        type: string
      id:
        type: integer
      timezone:
        type: string
    type: object
  industry.CreateRequest:
    properties:
      industry:
        type: string
    required:
    - industry
    type: object
  models.Billing:
    properties:
      amount:
        example: 900.25
        type: number
      comments:
        example: Something about the invoice...
        type: string
      company:
        $ref: '#/definitions/models.Company'
      company_id:
        example: 1
        type: integer
      created_at:
        example: "2020-01-01T00:00:00Z"
        type: string
      due_at:
        example: "2020-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      issued_at:
        example: "2020-01-01T00:00:00Z"
        type: string
      status:
        description: 'Available options: paid, unpaid, pending'
        example: paid
        type: string
      transaction_id:
        description: TODO - Check Stripe transaction ID standards for better example
          and update varchar length
        example: "12345678"
        type: string
      updated_at:
        example: "2020-01-01T00:00:00Z"
        type: string
    type: object
  models.Campaign:
    properties:
      company:
        $ref: '#/definitions/models.Company'
      company_id:
        example: 1
        type: integer
      created_at:
        example: "2020-01-01T00:00:00Z"
        type: string
      google_id:
        example: 1
        type: integer
      id:
        example: 1
        type: integer
      resource_name:
        example: Primary Monthly
        type: string
      updated_at:
        example: "2020-01-01T00:00:00Z"
        type: string
    type: object
  models.Company:
    properties:
      client_id:
        example: 1
        type: integer
      created_at:
        example: "2020-01-01T00:00:00Z"
        type: string
      domain:
        example: raajpatel.dev
        type: string
      email:
        example: the@raajpatel.dev
        type: string
      id:
        example: 1
        type: integer
      industry:
        $ref: '#/definitions/models.Industry'
      industry_id:
        example: 1
        type: integer
      name:
        example: Google LLC
        type: string
      updated_at:
        example: "2020-01-01T00:00:00Z"
        type: string
    type: object
  models.Industry:
    properties:
      Industry:
        example: Health Care
        type: string
      created_at:
        example: "2020-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      updated_at:
        example: "2020-01-01T00:00:00Z"
        type: string
    type: object
  models.Order:
    properties:
      amount:
        example: 900.25
        type: number
      company:
        $ref: '#/definitions/models.Company'
      company_id:
        example: 1
        type: integer
      created_at:
        example: "2020-01-01T00:00:00Z"
        type: string
      end_at:
        example: "2020-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      start_at:
        description: TODO - Check Stripe transaction ID standards for better example
          and update varchar length
        example: "2020-01-01T00:00:00Z"
        type: string
      status:
        description: 'Available options: pending, active, cancelled'
        example: pending
        type: string
      type:
        description: 'Available options: base, premium, enterprise, ads'
        example: base
        type: string
      updated_at:
        example: "2020-01-01T00:00:00Z"
        type: string
    type: object
  models.PreRegLocation:
    properties:
      id:
        example: 1
        type: integer
      location:
        example: Houston, TX
        type: string
      pre_registration_id:
        example: 1
        type: integer
    type: object
  models.PreRegService:
    properties:
      id:
        example: 1
        type: integer
      pre_registration_id:
        example: 1
        type: integer
      service:
        example: Dental Services
        type: string
    type: object
  models.PreRegistration:
    properties:
      budget:
        example: 100
        type: integer
      domain:
        example: example.com
        type: string
      id:
        example: 1
        type: integer
      locations:
        items:
          $ref: '#/definitions/models.PreRegLocation'
        type: array
      services:
        items:
          $ref: '#/definitions/models.PreRegService'
        type: array
    type: object
  models.Service:
    properties:
      company:
        $ref: '#/definitions/models.Company'
      company_id:
        example: 1
        type: integer
      created_at:
        example: "2020-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Digital Marketing
        type: string
      updated_at:
        example: "2020-01-01T00:00:00Z"
        type: string
    type: object
  models.UpdateOrder:
    properties:
      amount:
        type: number
      end_at:
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  models.User:
    properties:
      company:
        $ref: '#/definitions/models.Company'
      company_id:
        example: 1
        type: integer
      created_at:
        example: "2020-01-01T00:00:00Z"
        type: string
      email:
        example: the@raajpatel.dev
        type: string
      first_name:
        example: Raaj
        type: string
      id:
        example: 1
        type: integer
      last_name:
        example: Patel
        type: string
      password:
        example: hashed string...
        type: string
      role:
        example: user
        type: string
      updated_at:
        example: "2020-01-01T00:00:00Z"
        type: string
    type: object
  order.CreateRequest:
    properties:
      amount:
        type: number
      company:
        type: string
      end_at:
        type: string
      start_at:
        type: string
      status:
        type: string
      type:
        type: string
    required:
    - amount
    - company
    - end_at
    - start_at
    - status
    - type
    type: object
  preregistration.BudgetRequest:
    properties:
      budget:
        type: integer
      domain:
        type: string
    required:
    - budget
    - domain
    type: object
  preregistration.CreateRequest:
    properties:
      domain:
        type: string
    required:
    - domain
    type: object
  preregistration.LocationRequest:
    properties:
      domain:
        type: string
      location:
        items:
          type: string
        type: array
    required:
    - domain
    - location
    type: object
  preregistration.ServiceRequest:
    properties:
      domain:
        type: string
      service:
        items:
          type: string
        type: array
    required:
    - domain
    - service
    type: object
  service.CreateRequest:
    properties:
      company:
        type: string
      name:
        type: string
    required:
    - company
    - name
    type: object
  user.CreateRequest:
    properties:
      company:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      role:
        type: string
    required:
    - company
    - email
    - first_name
    - last_name
    - password
    - role
    type: object
  user.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  user.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  user.RegisterRequest:
    properties:
      company_name:
        type: string
      domain:
        type: string
      email:
        type: string
      first_name:
        type: string
      industry:
        type: string
      last_name:
        type: string
      password:
        type: string
    required:
    - company_name
    - domain
    - email
    - first_name
    - industry
    - last_name
    - password
    type: object
  user.ResetPasswordRequest:
    properties:
      password:
        type: string
    required:
    - password
    type: object
host: api.adomate.ai
info:
  contact:
    email: support@adomate.com
    name: Adomate API Support
    url: https://adomate.com/support
  description: Adomate Monolithic API
  title: Adomate API
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Show the status of server.
      tags:
      - General
  /billing:
    get:
      consumes:
      - '*/*'
      description: Gets a slice of all bills.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Billing'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get all Bills
      tags:
      - Billing
    post:
      consumes:
      - application/json
      description: Create a new bill.
      parameters:
      - description: Create Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/billing.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/models.Billing'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create Bill
      tags:
      - Billing
  /billing/{id}:
    delete:
      consumes:
      - '*/*'
      description: Delete a bill.
      parameters:
      - description: Billing ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete Bill
      tags:
      - Billing
    get:
      consumes:
      - '*/*'
      description: Gets all information about a single bill.
      parameters:
      - description: Billing ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Billing'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Gets a Bill
      tags:
      - Billing
    patch:
      consumes:
      - application/json
      description: Update information about a bill.
      parameters:
      - description: Create Request
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/billing.CreateRequest'
      - description: Billing ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/models.Billing'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update Bill
      tags:
      - Billing
  /billing/company/{id}:
    get:
      consumes:
      - '*/*'
      description: Gets a slice of all the bills for a specific company.
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Billing'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get all Bills for a Company
      tags:
      - Billing
  /campaign:
    get:
      consumes:
      - '*/*'
      description: Get a slice of all campaigns
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Campaign'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get all campaigns
      tags:
      - Campaign
    post:
      consumes:
      - application/json
      description: creates a campaign for certain company/user
      parameters:
      - description: Create Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/campaign.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/models.Campaign'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create a campaign
      tags:
      - Campaign
  /campaign/{id}:
    delete:
      consumes:
      - '*/*'
      description: Delete a campaign.
      parameters:
      - description: Campaign ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete Campaign
      tags:
      - Campaign
    get:
      consumes:
      - '*/*'
      description: Gets all information about a single campaign.
      parameters:
      - description: Campaign ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Campaign'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Gets a Campaign
      tags:
      - Campaign
  /campaign/company/{id}:
    get:
      consumes:
      - '*/*'
      description: get a slice of all campaigns for certain company
      parameters:
      - description: Campaign ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Campaign'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get all campaigns for a company
      tags:
      - Campaign
  /company:
    get:
      consumes:
      - '*/*'
      description: Get a slice of all companies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Company'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get all companies
      tags:
      - Company
    post:
      consumes:
      - application/json
      description: creates a company that can start campaigns, etc.
      parameters:
      - description: Create Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/company.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/models.Company'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create Company
      tags:
      - Company
  /company/{id}:
    delete:
      consumes:
      - '*/*'
      description: Delete a company.
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete Company
      tags:
      - Company
    get:
      consumes:
      - '*/*'
      description: Get a company.
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Company
      tags:
      - Company
  /forgot:
    post:
      consumes:
      - application/json
      description: Generates Password Reset Token & Sends Email to User with Password
        Reset Link
      parameters:
      - description: Forgot Password Request
        in: body
        name: forgot
        required: true
        schema:
          $ref: '#/definitions/user.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Sends email to user with password reset link
      tags:
      - Auth
  /gads/adgroup/{clientId}/{campaignId}:
    get:
      consumes:
      - '*/*'
      description: Gets all Google Ads Groups for specific Campaign
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        type: integer
      - description: Campaign ID
        in: path
        name: campaignId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/gads.AdGroup'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Google Ads AdGroup
      tags:
      - Google Ads
  /gads/adgroup/{clientId}/{campaignId}/{adgroupId}:
    get:
      consumes:
      - '*/*'
      description: Gets all information about specific Google AdGroup
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        type: integer
      - description: Campaign ID
        in: path
        name: campaignId
        required: true
        type: integer
      - description: AdGroup ID
        in: path
        name: adgroupId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gads.AdGroup'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Google Ads AdGroup
      tags:
      - Google Ads
  /gads/adgroupad/{clientId}/{campaignId}/{adgroupId}:
    get:
      consumes:
      - '*/*'
      description: Gets all information about specific Google AdGroupAd
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        type: integer
      - description: Campaign ID
        in: path
        name: campaignId
        required: true
        type: integer
      - description: AdGroup ID
        in: path
        name: adgroupId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gads.AdGroupAd'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Google Ads AdGroupAd
      tags:
      - Google Ads
  /gads/campaign/{clientId}/{campaignId}:
    get:
      consumes:
      - '*/*'
      description: Gets all information about specific Google Ads Campaign
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        type: integer
      - description: Campaign ID
        in: path
        name: campaignId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.Campaign'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Google Ads Campaign
      tags:
      - Google Ads
  /gads/campaigns/:
    get:
      consumes:
      - '*/*'
      description: Gets all Google Ads Campaigns
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/helpers.Campaign'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Google Ads Campaigns
      tags:
      - Google Ads
  /gads/campaigns/{clientId}:
    get:
      consumes:
      - '*/*'
      description: Gets all Google Ads Campaigns for specific Client
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/helpers.Campaign'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Google Ads Campaigns
      tags:
      - Google Ads
  /gads/client:
    get:
      consumes:
      - '*/*'
      description: Gets all Google Ads Clients
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/helpers.Client'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Google Ads Clients
      tags:
      - Google Ads
  /gads/client/{clientId}:
    get:
      consumes:
      - '*/*'
      description: Gets all information about specific Google Ads Client
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.Client'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Google Ads Client
      tags:
      - Google Ads
  /gads/keyword/{clientId}/{campaignId}/{adgroupId}:
    get:
      consumes:
      - '*/*'
      description: Gets all information about specific Google Keyword
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        type: integer
      - description: Campaign ID
        in: path
        name: campaignId
        required: true
        type: integer
      - description: AdGroup ID
        in: path
        name: adgroupId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gads.Keyword'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Google Ads Keyword
      tags:
      - Google Ads
  /industry:
    get:
      consumes:
      - '*/*'
      description: Get a slice of all industries
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Industry'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get all industries
      tags:
      - Industry
    post:
      consumes:
      - application/json
      description: creates an industry category
      parameters:
      - description: Create Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/industry.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/models.Industry'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create Industry
      tags:
      - Industry
  /industry/{id}:
    delete:
      consumes:
      - '*/*'
      description: Delete an industry.
      parameters:
      - description: Industry ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete Industry
      tags:
      - Industry
  /industry/{industry}:
    get:
      consumes:
      - '*/*'
      description: Gets all information about specific industry
      parameters:
      - description: Industry Name
        in: path
        name: industry
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Industry'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Gets an industry by name
      tags:
      - Industry
  /login:
    post:
      consumes:
      - application/json
      description: Login using user credentials.
      parameters:
      - description: Login Request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/user.LoginRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Login User
      tags:
      - Auth
  /logout:
    get:
      consumes:
      - '*/*'
      description: Logout of a user.
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Logout User
      tags:
      - Auth
  /me:
    get:
      consumes:
      - '*/*'
      description: Gets the DB Struct that belongs to the user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Gets self user struct
      tags:
      - Auth
  /order:
    get:
      consumes:
      - '*/*'
      description: Get a slice of all orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Order'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get all orders
      tags:
      - Order
    post:
      consumes:
      - application/json
      description: creates an order
      parameters:
      - description: Create Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/order.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Industry'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create Order
      tags:
      - Order
  /order/{id}:
    delete:
      consumes:
      - '*/*'
      description: Delete an order.
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete Order
      tags:
      - Order
    get:
      consumes:
      - '*/*'
      description: Gets all information about specific order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Order'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Gets an order
      tags:
      - Order
    patch:
      consumes:
      - application/json
      description: Update an order.
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Request
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/models.UpdateOrder'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update Order
      tags:
      - Order
  /preregistration:
    get:
      consumes:
      - '*/*'
      description: Get a slice of all preregistration
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PreRegistration'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get all preregistration
      tags:
      - Preregister
    post:
      consumes:
      - application/json
      description: preregisters a company
      parameters:
      - description: Create Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/preregistration.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/models.PreRegistration'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create Preregistration
      tags:
      - Preregister
  /preregistration/{domain}:
    get:
      consumes:
      - '*/*'
      description: Get a preregistration domain.
      parameters:
      - description: Preregistered Domain
        in: path
        name: domain
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PreRegistration'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Preregistration
      tags:
      - Preregister
  /preregistration/budget:
    post:
      consumes:
      - application/json
      description: Set Budget of a domain.
      parameters:
      - description: Budget Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/preregistration.BudgetRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Set Budget
      tags:
      - Preregister
  /preregistration/locations:
    delete:
      consumes:
      - application/json
      description: Delete locations from domain.
      parameters:
      - description: Location Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/preregistration.LocationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete Locations
      tags:
      - Preregister
    get:
      consumes:
      - '*/*'
      description: Get locations for preregistration domain
      parameters:
      - description: Domain Name
        in: path
        name: string
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Locations
      tags:
      - Preregister
    post:
      consumes:
      - application/json
      description: Add a location to preregistration domain
      parameters:
      - description: Location Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/preregistration.LocationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Add Location
      tags:
      - Preregister
  /preregistration/services:
    delete:
      consumes:
      - application/json
      description: Delete Services from domain.
      parameters:
      - description: Service Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/preregistration.ServiceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete Services
      tags:
      - Preregister
    get:
      consumes:
      - '*/*'
      description: Get services for preregistration domain
      parameters:
      - description: Domain Name
        in: path
        name: string
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Services
      tags:
      - Preregister
    post:
      consumes:
      - application/json
      description: Add services to preregistration domain
      parameters:
      - description: Service Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/preregistration.ServiceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Add Services
      tags:
      - Preregister
  /register:
    post:
      consumes:
      - application/json
      description: Registers a new user.
      parameters:
      - description: Register Request
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/user.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register New User
      tags:
      - Auth
  /reset/{resetToken}:
    post:
      consumes:
      - application/json
      description: Handles the password reset process from the link sent to the users
        email
      parameters:
      - description: Reset Password Request
        in: body
        name: reset
        required: true
        schema:
          $ref: '#/definitions/user.ResetPasswordRequest'
      - description: Reset Token
        in: path
        name: resetToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Handle password reset
      tags:
      - Auth
  /service:
    get:
      consumes:
      - '*/*'
      description: Gets a slice of all service.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Service'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get all service
      tags:
      - Service
    post:
      consumes:
      - application/json
      description: Create a new service.
      parameters:
      - description: Create Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/service.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create Service
      tags:
      - Service
  /service/{id}:
    delete:
      consumes:
      - '*/*'
      description: Delete a service.
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete Service
      tags:
      - Service
    get:
      consumes:
      - '*/*'
      description: Gets all information about a single Service.
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Service'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Gets a Service
      tags:
      - Service
    patch:
      consumes:
      - application/json
      description: Update information about a Service.
      parameters:
      - description: Create Request
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/service.CreateRequest'
      - description: Service ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/models.Service'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update Service
      tags:
      - Service
  /service/company/{id}:
    get:
      consumes:
      - '*/*'
      description: Gets a slice of all the Services for a specific company.
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Service'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get all Services for a Company
      tags:
      - Service
  /status:
    get:
      consumes:
      - '*/*'
      description: Gets whether the user is logged in
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Determines if user is logged in
      tags:
      - Auth
  /user:
    get:
      consumes:
      - '*/*'
      description: Gets a slice of all users.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get all Users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create a new user.
      parameters:
      - description: Create Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/user.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create User
      tags:
      - User
  /user/{id}:
    delete:
      consumes:
      - '*/*'
      description: Delete a user.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete User
      tags:
      - User
    get:
      consumes:
      - '*/*'
      description: Gets all information about a single user.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Gets a User
      tags:
      - User
    patch:
      consumes:
      - '*/*'
      description: Update information about a user.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update User
      tags:
      - User
  /user/company/{id}:
    get:
      consumes:
      - '*/*'
      description: Gets a slice of all the users for a specific company.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get all Users for a Company
      tags:
      - User
schemes:
- https
swagger: "2.0"
